#!/usr/bin/env python
import argparse
import base64
import os
import json

# Function to generate a random 16-byte block and encode it in base64
def generate_block():
    return base64.b64encode(os.urandom(16)).decode('utf-8')

# Function to generate test cases for gfdiv
def generate_gfdiv_testcases(num_cases):
    testcases = {}

    for i in range(1, num_cases + 1):
        # Generate two 16-byte blocks for a and b
        a = generate_block()
        b = generate_block()

        # Create a test case with a unique name
        testcases[f"gfdiv{i}"] = {
            "action": "gfdiv",
            "arguments": {
                "a": a,
                "b": b
            }
        }

    return testcases

# Main function
def main():
    parser = argparse.ArgumentParser(description="Generate test cases for gfdiv")
    parser.add_argument("num_cases", nargs="?", type=int, default=100, help="Number of test cases to generate")
    args = parser.parse_args()

    # Generate the test cases
    testcases = generate_gfdiv_testcases(args.num_cases)

    # Create the JSON structure
    data = {"testcases": testcases}

    # Save to a minified JSON file
    filename = f"gfdiv_{args.num_cases}.json"
    with open(filename, 'w') as f:
        json.dump(data, f)  # No indent, this minifies the JSON
    print(f"Test cases saved to {filename}")

if __name__ == "__main__":
    main()
